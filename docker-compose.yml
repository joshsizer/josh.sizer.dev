version: "3"
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        APP_ENV: ${APP_ENV}
        APP_ENV_DEVELOPMENT: ${APP_ENV_DEVELOPMENT}
        APP_ENV_PRODUCTION: ${APP_ENV_PRODUCTION}
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/etc/nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/etc/letsencrypt:/etc/letsencrypt
      - ./certbot/var/www/certbot:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/etc/letsencrypt:/etc/letsencrypt
      - ./certbot/var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nextjs:
    build: 
      context: ./nextjs
      dockerfile: Dockerfile
      args:
        APP_ENV: ${APP_ENV}
        APP_ENV_DEVELOPMENT: ${APP_ENV_DEVELOPMENT}
        APP_ENV_PRODUCTION: ${APP_ENV_PRODUCTION}
    container_name: nextjs
    restart: unless-stopped
    volumes:
      - ./nextjs/src:/nextjs/src

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./postgres/database.env
    volumes:
      - ./postgres/data:/var/lib/postgresql/data

  graphql-external:
    build: 
      context: ./graphql-typeorm
      dockerfile: Dockerfile
      args:
        APP_ENV: ${APP_ENV}
        APP_ENV_DEVELOPMENT: ${APP_ENV_DEVELOPMENT}
        APP_ENV_PRODUCTION: ${APP_ENV_PRODUCTION}
    container_name: graphql-external
    restart: unless-stopped
    environment:
      - ALWAYS_AUTHENTICATE=0
    volumes:
      - ./graphql-typeorm/dist:/graphql-typeorm/dist
      - ./graphql-typeorm/src:/graphql-typeorm/src
    depends_on:
      - postgres

  graphql-internal:
    build: 
      context: ./graphql-typeorm
      dockerfile: Dockerfile
      args:
        APP_ENV: ${APP_ENV}
        APP_ENV_DEVELOPMENT: ${APP_ENV_DEVELOPMENT}
        APP_ENV_PRODUCTION: ${APP_ENV_PRODUCTION}
    container_name: graphql-internal
    restart: unless-stopped
    environment:
      - ALWAYS_AUTHENTICATE=1
    volumes:
      - ./graphql-typeorm/dist:/graphql-typeorm/dist
      - ./graphql-typeorm/src:/graphql-typeorm/src
    depends_on:
      - postgres

  auth-server:
    build: 
      context: ./auth-server-nodejs
      dockerfile: Dockerfile
      args:
        APP_ENV: ${APP_ENV}
        APP_ENV_DEVELOPMENT: ${APP_ENV_DEVELOPMENT}
        APP_ENV_PRODUCTION: ${APP_ENV_PRODUCTION}
    container_name: auth-server
    restart: unless-stopped
    volumes:
      - ./auth-server-nodejs/dist:/auth-server-nodejs/dist
      - ./auth-server-nodejs/src:/auth-server-nodejs/src
    depends_on:
      - graphql-internal
